info:
  component: User Interface Service
  instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}}
server:
  port: 8080
  # Let spring-boot's ForwardedHeaderFilter take care of reflecting the client-originated protocol and address in the HttpServletRequest  
  forward-headers-strategy: framework
  servlet:
    context-path: /
    session:
      tracking-modes: COOKIE
      cookie:
        name: JSESSIONID_${spring.application.name}
        http-only: true
management.server.port: 8081
geoserver.base-path: /web
spring:
  config:
    import:
# import definition of common bootstrap configuration profiles    
    - classpath:gs_cloud_bootstrap_profiles.yml
# load externalized configuration from geoserver.yml
    name: geoserver 
# and always include the service specific settings from the profile
  profiles.include: webui_service 
# also ask for geoserver.yml when loading the externalized config through a config-server
  cloud.config.name: geoserver
  main:
    banner-mode: off
    allow-bean-definition-overriding: true
    allow-circular-references: true # false by default since spring-boot 2.6.0, breaks geoserver initialization
    web-application-type: servlet
  application:
    name: web-ui
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration
      - org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration
      - org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration
      # Force disabling GWC UI, it's embedded in gwc-core, so can't have a ConditionalOnClass
      - org.geoserver.cloud.autoconfigure.web.gwc.GeoWebCacheUIAutoConfiguration

# same as default of true, this service does use the registry (when eureka client is enabled)
eureka.client:
  fetch-registry: true
  registry-fetch-interval-seconds: 10

geoserver:
  styling:
    css.enabled: true
  wms:
    output-formats:
      vector-tiles:
        mapbox.enabled: true
        geojson.enabled: false
        topojson.enabled: false
  web-ui:
    file-browser.hide-file-system: true
    # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure
    security.enabled: true
    wfs.enabled: ${webui.wfs.enabled:true}
    wms.enabled: ${webui.wms.enabled:true}
    wcs.enabled: ${webui.wcs.enabled:true}
    wps.enabled: ${webui.wps.enabled:true}
    gwc:
      enabled: ${gwc.enabled:true}
      capabilities:
        tms: ${gwc.services.tms:true}
        wmts: ${gwc.services.wmts:true}
        wmsc: ${gwc.services.wms:false}
    extensions:
      importer.enabled: true
    demos:
      enabled: true
      wps-request-builder: true
      wcs-request-builder: true
      demo-requests: true
      srs-list: true
      reprojection-console: true
      layer-preview-page:
        enabled: true
        common-formats:
          open-layers: true
          gml: true
          kml: false #kml links are broken
    tools:
      enabled: true
      resource-browser: true
      catalog-bulk-load: true

---
# local profile, used for development only. Other settings like config and eureka urls in gs_cloud_bootstrap_profiles.yml
spring.config.activate.on-profile: local
server.port: 9106
management.server.port: 8106
